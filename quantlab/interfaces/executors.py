from abc import ABC, abstractmethod
from typing import Self, Any, Protocol
from quantlab.interfaces.types import Attributes

class ContainerProtocol[T](Protocol):
    data: T
    __slots__ = Attributes.DATA

    def __init__(self, data: T) -> None:
        self.data: T = data

    def new(self, data: T) -> Self: ...

class ExecutorProtocol[T: ContainerProtocol[Any]](ABC):
    __slots__ = Attributes.PARENT

    def __init__(self, parent: T) -> None:
        self._parent: T = parent

class AbstractAggregateExecutor[T: ContainerProtocol[Any]](ExecutorProtocol[T]):
    __slots__ = (Attributes.PARENT, Attributes.LEN, Attributes.MIN_LEN)

    @abstractmethod
    def sharpe(self) -> T: ...
    @abstractmethod
    def stdev(self) -> T: ...
    @abstractmethod
    def max(self) -> T: ...
    @abstractmethod
    def min(self) -> T: ...
    @abstractmethod
    def mean(self) -> T: ...
    @abstractmethod
    def median(self) -> T: ...
    @abstractmethod
    def sum(self) -> T: ...
    @abstractmethod
    def skew(self) -> T: ...

class AbstractWindowExecutor[T: ContainerProtocol[Any]](ExecutorProtocol[T]):
    __slots__ = (Attributes.PARENT, Attributes.LEN, Attributes.MIN_LEN)

    def __init__(self, parent: T, len: int, min_len: int) -> None:
        self._parent: T = parent
        self._len: int = len
        self._min_len: int = min_len

    @abstractmethod
    def sharpe(self) -> T: ...
    @abstractmethod
    def stdev(self) -> T: ...
    @abstractmethod
    def max(self) -> T: ...
    @abstractmethod
    def min(self) -> T: ...
    @abstractmethod
    def mean(self) -> T: ...
    @abstractmethod
    def median(self) -> T: ...
    @abstractmethod
    def sum(self) -> T: ...
    @abstractmethod
    def skew(self) -> T: ...
    @abstractmethod
    def kurt(self) -> T: ...

class AbstractConverterExecutor[T: ContainerProtocol[Any]](ExecutorProtocol[T]):
    __slots__ = Attributes.PARENT

    @abstractmethod
    def equity_to_pct(self) -> T: ...
    @abstractmethod
    def equity_to_equity_log(self) -> T: ...
    @abstractmethod
    def equity_log_to_equity(self) -> T: ...
    @abstractmethod
    def equity_log_to_log(self) -> T: ...
    @abstractmethod
    def pct_to_equity(self) -> T: ...
    @abstractmethod
    def pct_to_log(self) -> T: ...
    @abstractmethod
    def log_to_pct(self) -> T: ...
    @abstractmethod
    def log_to_equity_log(self) -> T: ...
    @abstractmethod
    def pct_to_equity_log(self) -> T: ...
    @abstractmethod
    def equity_to_log(self) -> T: ...